# Query and Mutation will start from here
type Query {
    # Authentication Query
    signIn(loginRequest: LoginRequest): BaseResponse
    getUserDetails: BaseResponse
    signOut: BaseResponse

    # Order Query
    getAllOrders: BaseResponse
    getOrder(orderId: String): BaseResponse
    sumOfOrder(orderId: String): BaseResponse
}

type Mutation {
    # Authentication Mutation
    createAccount(signupRequest: SignupRequest): BaseResponse
    updateUser(profileUpdateRequest: ProfileUpdateRequest): BaseResponse

    # Order Mutation
    placeOrder(placeOrderRequest: PlaceOrderRequest): BaseResponse
}



# Base Configuration types
union ResponseType = AuthResponse | UserDataResponse | ProfileUpdateResponse
    | SignOutResponse | OrdersResponse | OrderResponse
    | SumOfOrderResponse

scalar Long

type BaseResponse {
    status: ResponseStatus
    response: ResponseType
}

type ResponseStatus {
    success: Boolean
    code: Int
    message: String
}


# Start Write Request types from from here
input LoginRequest {
    userName: String
    password: String
}

input SignupRequest {
    userName: String
    password: String
    fullName: String
    phoneNo: String
    picture: String
    firstName: String
    lastName: String
}

input ProfileUpdateRequest {
    fullName: String
    phoneNo: String
    picture: String
    firstName: String
    lastName: String
}

input PlaceOrderRequest {
    itemList: [OrderItemRequest]
}

input OrderItemRequest {
    amount: Float
    name: String
    price: Float
}



# Start Write Response types from here
type AuthResponse {
    userDataResponse: UserDataResponse
    tokenResponse: TokenResponse
}

type UserDataResponse {
    id: Long
    email: String
    fullName: String
    phoneNo: String
    picture: String
    firstName: String
    lastName: String
}

type TokenResponse {
    expiry: Long
    userToken: String
    tokenType: String
}

type ProfileUpdateResponse {
    success: Boolean
}

type SignOutResponse {
    success: Boolean
}

type OrdersResponse {
    orders: [PartialOrderResponse]
}

type PartialOrderResponse {
    orderId: Long
    createdAt: Long
}

type OrderResponse {
    orderId: Long
    createdAt: Long
    contents: [OrderItemResponse]
}

type OrderItemResponse {
    amount: Float
    item: String
    price: Float
}

type SumOfOrderResponse {
    sum: Float
}